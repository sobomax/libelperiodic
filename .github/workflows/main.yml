# This is a basic workflow to help you get started with Actions

name: Main CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
  pull_request:

  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    env:
      COMPILER: ${{ matrix.compiler }}
      DOCKR_PLATFORM: 'x86_64'
      DOCKR_BASE: 'ubuntu:18.04'

    strategy:
      matrix:
        compiler: ['gcc', 'clang']
        os: [ubuntu-latest, ubuntu-20.04]
        include:
        - os: ubuntu-latest
          compiler: 'gcc-i386-cross'
        - os: ubuntu-latest
          compiler: 'clang-i386-cross'
        - os: ubuntu-latest
          compiler: 'gcc-mips64-cross'
        # Test hangs & horrible jitter... :(
        # - os: ubuntu-latest
        #   compiler: 'gcc-arm32-cross'
        - os: ubuntu-latest
          compiler: 'gcc-arm64-cross'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    - name: Start Docker container
      if: endsWith(matrix.compiler, '-cross')
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static
        docker run --cidfile /tmp/_docker.cid -d --restart=always --platform linux/${DOCKR_PLATFORM} -v `pwd`:`pwd` ${DOCKR_BASE} sleep infinity

    - name: before_install
      run: if [ ! -e /tmp/_docker.cid ]; then sh -x scripts/do-install.sh; else COMPILER="${COMPILER}" docker exec -w `pwd` --env COMPILER `cat /tmp/_docker.cid` sh -x scripts/do-install.sh; fi

    - name: script
      run: if [ ! -e /tmp/_docker.cid ]; then sh -x scripts/do-test.sh; else COMPILER="${COMPILER}" docker exec -w `pwd` --env COMPILER `cat /tmp/_docker.cid` sh -x scripts/do-test.sh; fi

  build_and_test_python:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    env:
      COMPILER: ${{ matrix.compiler }}

    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13-dev']
        compiler: ['gcc', 'clang']
        os: [ubuntu-latest, ubuntu-20.04, macos-latest]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Define PYTHON_CMD
      run: |
        PYTHON_VER="`echo ${{ matrix.python-version }} | sed 's|-dev$||'`"
        echo "PYTHON_CMD=python${PYTHON_VER}" >> $GITHUB_ENV

    - if: ${{ matrix.os != 'macos-latest' }}
      name: before_install
      run: sh -x scripts/do-install.sh

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel build

    - name: script
      run: sh -x scripts/do-test-pwheels.sh

  build_wheels:
    permissions:
      packages: write
    needs: [build_and_test_python]
    uses: sippy/cimagic/.github/workflows/BuildPythonWheels.yml@v1

  publish_all_wheels:
    runs-on: ubuntu-latest
    needs: [build_and_test, build_and_test_python, build_wheels]
    environment:
      name: pypi
      url: https://pypi.org/p/elperiodic
    permissions:
      actions: read
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4

    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: 'dist-*'
        merge-multiple: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade build setuptools wheel

    - name: build
      run: python setup.py build sdist

    - name: Publish package distributions to PyPI
      if: github.event_name == 'release' && github.event.action == 'published'
      uses: pypa/gh-action-pypi-publish@release/v1

  roll_release:
    needs: publish_all_wheels
    permissions:
      contents: write
    uses: sippy/cimagic/.github/workflows/RollReleaseDraft.yml@v1
